dnl Process this file with autoconf to produce a configure script.
AC_INIT(configure.in)
AC_REVISION($Id$)

[
  prefix=/usr/local
  exec_prefix=/usr/local
  libdir=${exec_prefix}/lib
  bindir=${exec_prefix}/bin
  sbindir=${exec_prefix}/sbin
  include="../include"
  basedir="../"
]

AC_CONFIG_HEADER(setup.h)

[PACKAGE=sorcerynetd]
[VERSION=1.4.0]
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)

dnl Checks for programs.
AC_CANONICAL_SYSTEM
AC_PROG_CC
AC_PROG_CXX
AC_PROG_MAKE_SET
AC_PATH_PROG(MAKE, make)
AC_PATH_PROG(RM,rm)
AC_PATH_PROG(CP,cp)
AC_PATH_PROG(AR,ar)
AC_PATH_PROG(MAKEDEPEND,makedepend)
AC_PROG_INSTALL
AC_ISC_POSIX
AC_AIX

AC_TYPE_SIGNAL
AC_CHECK_TYPE(u_int32_t, UINT8_T)
AC_CHECK_TYPE(int32_t, INT32_T)
AC_CHECK_TYPE(u_int16_t, UINT16_T)
AC_CHECK_TYPE(int16_t, INT16_T)
AC_CHECK_TYPE(u_int8_t, UINT8_T)
AC_CHECK_TYPE(int8_t, INT8_T)

AC_CHECK_TYPE(u_char, unsigned char)
AC_CHECK_TYPE(u_short, unsigned short)
AC_CHECK_TYPE(u_long, unsigned long)
AC_CHECK_TYPE(u_int, unsigned int)

dnl Checks for libraries.
dnl Replace `main' with a function in -lnsl:
AC_CHECK_LIB(nsl, gethostbyname)
AC_CHECK_LIB(ssl, SSL_library_init)
AC_CHECK_LIB(z, zlibVersion)
AC_CHECK_FUNC(res_mkquery,, AC_CHECK_LIB(resolv, res_mkquery))
AC_CHECK_FUNC(dn_skipname,, AC_CHECK_FUNC(__dn_skipname, AC_DEFINE(dn_skipname, __dn_skipname)))
AC_CHECK_LIB(socket, socket)

MD5CRYPT=''
if test -d md5 ; then
    MD5CRYPT='../md5/md5.a'
fi
AC_SUBST(MD5CRYPT)

DESCRYPT=''
AC_CHECK_FUNC(crypt,, AC_CHECK_LIB(descrypt, crypt,,AC_CHECK_LIB(crypt, crypt,,
[
  ./fcrypt.sh
  DESCRYPT=fcrypt.o
])))
AC_SUBST(DESCRYPT)

AC_CHECK_FUNC(index,, AC_DEFINE(NOINDEX))
AC_CHECK_FUNC(strerror,, AC_DEFINE(NEED_STRERROR))
AC_CHECK_FUNC(strtoken,, AC_DEFINE(NEED_STRTOKEN))
AC_CHECK_FUNC(strtok,, AC_DEFINE(NEED_STRTOK))
AC_CHECK_FUNC(inet_addr,, AC_DEFINE(NEED_INET_ADDR))
AC_CHECK_FUNC(inet_ntoa,, AC_DEFINE(NEED_INET_NTOA))
AC_CHECK_FUNC(inet_netof,, AC_DEFINE(NEED_INET_NETOF))
AC_CHECK_FUNC(gettimeofday, AC_DEFINE(GETTIMEOFDAY))
AC_CHECK_FUNC(lrand48, AC_DEFINE(LRAND48))
AC_CHECK_FUNC(strtoul, AC_DEFINE(HAVE_STRTOUL))


dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/param.h unistd.h string.h strings.h sys/syslog.h stdlib.h stddef.h stropts.h limits.h)
AC_CHECK_HEADERS(openssl/ssl.h zlib.h)
AC_CHECK_HEADER(malloc.h, AC_DEFINE(MALLOCH, <malloc.h>))
AC_CHECK_HEADER(unistd.h, AC_DEFINE(UNISTDH, <unistd.h>))
AC_CHECK_HEADER(string.h, AC_DEFINE(STRINGH, <string.h>))
AC_CHECK_HEADER(strings.h, AC_DEFINE(STRINGSH, <strings.h>))
AC_CHECK_HEADER(stdlib.h, AC_DEFINE(STDLIBH, <stdlib.h>))
AC_CHECK_HEADER(stddef.h, AC_DEFINE(STDDEFH, <stddef.h>))
AC_CHECK_HEADER(syslog.h, AC_DEFINE(SYSLOGH, <syslog.h>))

AC_MSG_CHECKING(MIN and MAX definition)
AC_EGREP_CPP(yes,
[
#if defined( HAVE_SYS_PARAM_H )
#include <sys/param.h>
#ifdef MIN
  yes
#endif
#endif
], AC_DEFINE(HAVE_MINMAX) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

AC_SUBST(include)
AC_SUBST(basedir)


dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_CHECK_FUNCS(index strerror strtoken strtok inet_addr inet_ntoa inet_netof inet_aton)
AC_CHECK_FUNCS(gettimeofday lrand48 sigaction bzero bcmp bcopy)
AC_CHECK_FUNCS(dn_skipname __dn_skipname, break)
AC_CHECK_FUNC(getrusage, AC_DEFINE(GETRUSAGE_2), AC_CHECK_FUNC(times, AC_DEFINE(TIMES_2),AC_MSG_ERROR([One for debugging mainly.. I couldn't find getrusage(2) or times(2)])))

dnl taken from ircd's Config script
nonblock=no
AC_MSG_CHECKING(for posix (O_NONBLOCK) nonblocking sockets)
AC_TRY_RUN(
[
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <signal.h>
alarmed()
{
        exit(1);
}
int main()
{
#if defined(O_NONBLOCK)
        char b[12], x[32];
        int f, l = sizeof(x);
        f = socket(AF_INET, SOCK_DGRAM, 0);
        if (f >= 0 && !(fcntl(f, F_SETFL, O_NONBLOCK))) {
                signal(SIGALRM, alarmed);
                alarm(3);
                recvfrom(f, b, 12, 0, (struct sockaddr *)x, &l);
                alarm(0);
                exit(0);
        }
#endif
        exit(1);
}
], AC_DEFINE(NBLOCK_POSIX)
nonblock=yes
AC_MSG_RESULT(O_NONBLOCK),
AC_MSG_RESULT(no), AC_MSG_RESULT(can't tell))

if test $nonblock = no; then
AC_MSG_CHECKING(for bsd (O_NDELAY) nonblocking sockets)
AC_TRY_RUN(
[
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <signal.h>
alarmed()
{
        exit(1);
}
int main()
{
#if defined( O_NDELAY ) && !defined( NBLOCK_POSIX )
        char b[12], x[32];
        int f, l = sizeof(x);
        f = socket(AF_INET, SOCK_DGRAM, 0);
        if (f >= 0 && !(fcntl(f, F_SETFL, O_NDELAY))) {
                signal(SIGALRM, alarmed);
                alarm(3);
                recvfrom(f, b, 12, 0, (struct sockaddr *)x, &l);
                alarm(0);
                exit(0);
        }
#endif
        exit(1);
}
], AC_DEFINE(NBLOCK_BSD)
nonblock=yes
AC_MSG_RESULT(O_NDELAY),
AC_MSG_RESULT(no), AC_MSG_RESULT(can't tell))
fi

if test $nonblock = no; then
AC_MSG_CHECKING(for sysv (FIONBIO) nonblocking sockets)
AC_TRY_RUN(
[
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <signal.h>
alarmed()
{
        exit(1);
}
int main()
{
#if !defined(NBLOCK_BSD) && !defined(NBLOCK_POSIX) && defined(FIONBIO)
        char b[12], x[32];
        int f, l = sizeof(x);
        f = socket(AF_INET, SOCK_DGRAM, 0);
        if (f >= 0 && !(fcntl(f, F_SETFL, FIONBIO))) {
                signal(SIGALRM, alarmed);
                alarm(3);
                recvfrom(f, b, 12, 0, (struct sockaddr *)x, &l);
                alarm(0);
                exit(0);
        }
#endif /* !NBLOCK_POSIX && !NBLOCK_BSD && FIONBIO */
        exit(1);
}
], AC_DEFINE(NBLOCK_SYSV)
nonblock=yes
AC_MSG_RESULT(FIONBIO),
AC_MSG_RESULT(no),
AC_MSG_RESULT(unable to test))
fi

if test $nonblock = no; then
AC_MSG_ERROR(No nonblocking socket implementation found. ircd requires nonblocking sockets.)
fi

dnl taken from ircd's Config script
AC_MSG_CHECKING(signal implementation)
AC_TRY_RUN(
[
int main()
{
#if defined(HAVE_SIGACTION)
        exit(0);
#else
        exit(1);
#endif
}
], AC_DEFINE(POSIX_SIGNALS) AC_MSG_RESULT(posix),
    AC_TRY_RUN(
[
#include <signal.h>
int calls = 0;
void handler()
{
        if (calls) return;
        calls++;
        kill(getpid(), SIGTERM);
        sleep(1);
}
int main()
{
        signal(SIGTERM, handler);
        kill(getpid(), SIGTERM);
        exit (0);
}
], AC_DEFINE(BSD_RELIABLE_SIGNALS) AC_MSG_RESULT(bsd),
    AC_DEFINE(SYSV_UNRELIABLE_SIGNALS) AC_MSG_RESULT(sysv), AC_MSG_RESULT(uknown)),
AC_MSG_RESULT(unknown))
dnl Check for sys_errlist
dnl Stolen from BitchX
AC_MSG_CHECKING(for sys_errlist declaration)
AC_TRY_RUN([
#include <sys/types.h>
#include <stdio.h>
#include <errno.h>
main()
{
  char *s = sys_errlist[0];
          exit(0);
}
],
  AC_MSG_RESULT(yes)
  AC_DEFINE(SYS_ERRLIST_DECLARED),
  AC_MSG_RESULT(no), AC_MSG_RESULT(cross compiling))

dnl Check to see if we should set USE_FAST_FD_ISSET
AC_MSG_CHECKING(to see if we should enable fast FD_ISSET code)
AC_TRY_COMPILE(, [
#include <sys/types.h>

int main()
{
  fd_set read_set;
  read_set.fds_bits;
  exit(0);
}
],
  AC_MSG_RESULT(yes)
  AC_DEFINE(USE_FAST_FD_ISSET),
  AC_MSG_RESULT(no))

dnl Check to see if we have a broken FD_SETSIZE

DFDSS='-DFD_SETSIZE=1024'

AC_MSG_CHECKING(to see if FD_SETSIZE is broken)

if test -e "/lib/libc.so.6" ; then
    AC_DEFINE(LINUX_GLIBC)
fi

AC_TRY_RUN([
#define FD_SETSIZE 666
#include <sys/types.h>
#include <sys/time.h>

int main()
{
  if(FD_SETSIZE != 666)
     exit(1);
  exit(0);
}
],
AC_MSG_RESULT(no),
AC_MSG_RESULT(YES)
AC_MSG_WARN(FD_SETSIZE is hard set by your operating system)
AC_MSG_WARN(MAXCONNECTIONS must be no higher than the hardwired FD_SETSIZE)
DFDSS="",
AC_MSG_RESULT(can't tell))

AC_SUBST(DFDSS)

dnl don't add more of these unless it's critical.  Trying to get rid of them.
AC_MSG_CHECKING(operating system)
case "$target" in
*-solaris2*) AC_DEFINE(OS_SOLARIS2) AC_MSG_RESULT(Solaris 2.x) ;;
*-aix*) AC_DEFINE(OS_AIX) AC_MSG_RESULT(AIX) ;;
*-esix*) AC_DEFINE(OS_ESIX) AC_MSG_RESULT(ESIX) ;;
*-next*) AC_DEFINE(OS_NEXT) AC_MSG_RESULT(NeXT something) ;;
*-mips*) AC_DEFINE(OS_MIPS) AC_MSG_RESULT(MIPS something) ;;
*-sequent-ptx*) AC_DEFINE(OS_DYNIXPTX) AC_MSG_RESULT(Dynix PTX) ;;
*-hpux*) AC_DEFINE(OS_HPUX) AC_MSG_RESULT(HP-UX) ;;
*) AC_MSG_RESULT(nothing special required) ;;
esac

AC_ARG_ENABLE(hub,
  [  --enable-hub            Compile with hubbing enabled],
  [if test "$enableval" = "yes" ; then
        HUB='1'
   else
        HUB=''
   fi
   ],
 [HUB='default'])
AC_SUBST(HUB)


AC_ARG_ENABLE(md5,
  [  --enable-md5            Compile with md5 password hash support],
  [if test "$enableval" = "yes" ; then
        MD5='1'
   else
        MD5=''
   fi
   ],
 [MD5='default'])
AC_SUBST(MD5)

AC_ARG_WITH(checkport,
  [  --with-checkport=<num>  Select local port to listen on for socks checking],
  [if test -n "$withval" ; then
        CHECKPORT="$withval"
   else
        CHECKPORT='19000'
   fi
   ],
 [CHECKPORT='default'])
AC_SUBST(CHECKPORT)

AC_ARG_WITH(mode,                     
  [  --with-mode=[<mode>]    Set permissions to install ircd with],
  [if test -n "$withval" ; then
        IRCDMODE="$withval"
   else
        AC_MSG_ERROR([Must specify a mode (such as 711 or 750) with --with-mode])
   fi
   ],
 [
        IRCDMODE="711"
 ])
AC_SUBST(IRCDMODE)



AC_ARG_WITH(dpath,
  [  --with-dpath=<path>     Set ircd basedir (default: prefix/lib/ircd) ],
  [if test -n "$withval" ; then
        DPATH="$withval"
        if ! test -d "$withval" ; then
        AC_MSG_ERROR([Invalid dpath directory.])
        fi
   else
        AC_MSG_ERROR([--with-dpath requires a path])
   fi
   ],
 [
        DPATH="${libdir}/ircd"
 ])
AC_DEFINE_UNQUOTED(DPATH, "$DPATH")
AC_SUBST(DPATH)



AC_ARG_WITH(spath,
  [  --with-spath=<path>     Set ircd binary path (default: prefix/lib/ircd/ircd) ],
  [if test -n "$withval" ; then
        SPATH="$withval"
        if ! test -d "$withval" ; then
        AC_MSG_ERROR([Invalid spath directory.])
        fi
   else
        AC_MSG_ERROR([--with-spath requires a path])
   fi
   ],
 [
        SPATH="${libdir}/ircd/ircd"
 ])
AC_DEFINE_UNQUOTED(SPATH, "$SPATH")

AC_DEFINE(Reg1, register)
AC_DEFINE(Reg2, register)
AC_DEFINE(Reg3, register)
AC_DEFINE(Reg4, register)
AC_DEFINE(Reg5, register)
AC_DEFINE(Reg6, register)
AC_DEFINE(Reg7, register)
AC_DEFINE(Reg8, register)
AC_DEFINE(Reg9, register)
AC_DEFINE(Reg10, register)

AC_OUTPUT(src/Makefile md5/Makefile tools/Makefile setup.h Makefile Config,
[chmod +x Config; sh ./Config -auto])

