#!/bin/sh
#
# Copyright 1996, 1997 Michael Graff <explorer@flame.org>
# You may distribute this file without changes freely providing this notice
# remains intact.
#
MAKE=/usr/bin/make

if [ -d md5 ] ; then
  if [ ! -r md5/md5.a ]  ; then
      cd md5
      $MAKE
      cd ..
  fi
fi

if [ "$1" != "-write" ] ; then
CONFIG_SCRIPT=./Config
IRCD_VERSION="sor1.4-BETA"
CONF_DATE=`date`
LAST_VERSION="very very old"
#
trap "" 13 14 15
MV=mv
RM=rm
SETUP=../include/setup.h
OPTIONS_H=../include/options.h
MAKEFILE=../Makefile
OPTIONS=../Options
AUTO_CONFIG=""
#
STDLIBH=undef
STDDEFH=undef
SYSSYSLOGH=undef
MALLOCH=undef
PARAMH=undef
UNISTDH=undef
STRINGH=undef
STRINGSH=undef
RUSAGEH=undef
NOINDEX=undef
NSTRERROR=undef
NSTRTOKEN=undef
NSTRTOK=undef
REDHAT6=undef
LINUX_GLIBC=undef
NINETADDR=undef
NINETNTOA=undef
NINETNETOF=undef
GETTIMEOFDAY=undef
LRAND48=undef
STRTOUL=undef
MASK_SEED='0x0'
TMP=./Configtmp$$.c
CCPATH='gcc'
SIGNAL=''
BLOCKING=''
EXEC=./Configtmp$$
PLATE=./ConPlate$$
c=''
n=''

# when Config stops, make sure the /tmp file is dead
#previously, it sometimes left the file if you ^C'd out...
trap "rm -f $TMP $EXEC $PLATE; rm -f $EXEC;cd ..;rmdir configtmp.$$;echo '';echo \"deleting $TMP\";exit " 1 2 11 15 4
trap "rm -f $TMP $EXEC $PLATE; rm -f $EXEC;cd ..;rmdir configtmp.$$;echo '';echo \"deleting $TMP\";exit " 5 6 7 8 9

#
# Some reasonable defaults
#
#DEFOPT="-O -g -Wuninitialized -Wcomment"
DEFOPT="-g -O2"
DEFCFLAGS="$DEFOPT"
DEFLIBS="none"
OSNAME="an unrecgonized operating system"
#
DESCRYPT="none"
NOSPOOF=""
NOSPOOF_SEED01="0x12345678"
NOSPOOF_SEED02="0x9abcdef0"
NS_ADDRESS="nospoof@sorcery.net"
KLINE_ADDRESS="kline@sorcery.net"
DOMAINNAME="sorcery.net"
HUB="default"
CHECKPORT='default'
CRYPT_OPER_PASSWORD="1"
CRYPT_LINK_PASSWORD=""
MD5_PASSWORD="default"
LISTEN_SIZE="5"
MAXSENDQLENGTH="3000000"
BUFFERPOOL="(9 * MAXSENDQLENGTH)"
NICKNAMEHISTORYLENGTH="750"
MAXCONNECTIONS="1024"
SN_SERVER=undef
SERVER_NAME=''
SERVER_ID=0
SN_SEED=''
NETNAME=''
NETKLINE=''

export DESCRYPT NOSPOOF NOSPOOF_SEED01 NOSPOOF_SEED02
export NS_ADDRESS KLINE_ADDRESS DOMAINNAME HUB CHECKPORT
export CRYPT_OPER_PASSWORD CRYPT_LINK_PASSWORD MD5_PASSWORD
export LISTEN_SIZE MAXSENDQLENGTH BUFFERPOOL NICKNAMEHISTORYLENGTH
export MAXCONNECTIONS SN_SERVER SERVER_NAME SERVER_ID NETNAME
export CONFIG_SCRIPT IRCD_VERSION CONF_DATE LAST_VERSION MV RM OPTIONS
export OPTIONS_H AUTO_CONFIG MASK_SEED PLATE c n EXEC SN_SEED
export OPTIONS SETUP MAKEFILE

else
#
# create the $OPTIONS_H file
#
rm -f $OPTIONS_H
cat > $OPTIONS_H << __EOF__
/*
 * VERSION: $IRCD_VERSION
 * DATE:    $CONF_DATE
 *
 * This file is automatically generated and will be updated each time you
 * run Config.  YOU SHOULD NOT EDIT THIS FILE.  Instead, edit "$OPTIONS" in
 * the same directory as Config, and rerun to regenerate this file.
 */

#define LISTEN_SIZE $LISTEN_SIZE
#define MAXSENDQLENGTH $MAXSENDQLENGTH
#define BUFFERPOOL $BUFFERPOOL
#define MAXCONNECTIONS $MAXCONNECTIONS
#define NICKNAMEHISTORYLENGTH $NICKNAMEHISTORYLENGTH
#define CHECKPORT $CHECKPORT
#define NETWORK "$NETNAME"
#define NETWORK_KLINE_ADDRESS "$NETKLINE"
__EOF__

if [ "$SN_SERVER" = "undef" ] ; then
    echo "#define MASK_SEED $MASK_SEED" >> $OPTIONS_H
else
    echo "#define MASK_SEED $SN_SEED" >> $OPTIONS_H
fi

if [ -n "$HUB" ] ; then
    echo "#define HUB 1" >> $OPTIONS_H
else
    echo "#undef HUB" >> $OPTIONS_H
fi


if [ -n "$CRYPT_OPER_PASSWORD" ] ; then
    echo "#define CRYPT_OPER_PASSWORD 1" >> $OPTIONS_H
else
    echo "#undef CRYPT_OPER_PASSWORD" >> $OPTIONS_H
fi

if [ -n "$MD5_PASSWORD" ] ; then
    echo "#define MD5_PASSWORD 1" >> $OPTIONS_H
else
    echo "#undef MD5_PASSWORD" >> $OPTIONS_H
fi

if [ -n "$CRYPT_LINK_PASSWORD" ] ; then
    echo "#define CRYPT_LINK_PASSWORD 1" >> $OPTIONS_H
else
    echo "#undef CRYPT_LINK_PASSWORD" >> $OPTIONS_H
fi
if [ -n "$NOSPOOF" ] ; then
    echo "#define NOSPOOF 1" >> $OPTIONS_H
else
    echo "#undef NOSPOOF" >> $OPTIONS_H
fi
if [ -n "$NOSPOOF_SEED01" ] ; then
    echo "#define NOSPOOF_SEED01 $NOSPOOF_SEED01" >> $OPTIONS_H
fi
if [ -n "$NOSPOOF_SEED02" ] ; then
    echo "#define NOSPOOF_SEED02 $NOSPOOF_SEED02" >> $OPTIONS_H
fi
if [ -n "$NS_ADDRESS" ] ; then
    echo "#define NS_ADDRESS \"$NS_ADDRESS\"" >> $OPTIONS_H
fi
if [ -n "$KLINE_ADDRESS" ] ; then
    echo "#define KLINE_ADDRESS \"$KLINE_ADDRESS\"" >> $OPTIONS_H
fi
if [ -n "$DOMAINNAME" ] ; then
    echo "#define DOMAINNAME \"$DOMAINNAME\"" >> $OPTIONS_H
else
    echo "undef DOMAINNAME" >> $OPTIONS_H
fi

#
# create the persistant file
#
rm -f $OPTIONS
cat > $OPTIONS << __EOF__
#
# VERSION: $IRCD_VERSION
# DATE:    $CONF_DATE
#
# This file is automatically generated and will be updated each time you
# run Config.  You should retain a copy of this to help migrate to future
# versions of the DALnet server with ease.
#
LAST_VERSION="$IRCD_VERSION"
NETNAME="$NETNAME"
NETKLINE="$NETKLINE"
SERVER_NAME="$SERVER_NAME"
SERVER_ID="$SERVER_ID"
NOSPOOF="$NOSPOOF"
NOSPOOF_SEED01="$NOSPOOF_SEED01"
NOSPOOF_SEED02="$NOSPOOF_SEED02"
NS_ADDRESS="$NS_ADDRESS"
KLINE_ADDRESS="$KLINE_ADDRESS"
HUB="$HUB"
CHECKPORT="$CHECKPORT"
CRYPT_OPER_PASSWORD="$CRYPT_OPER_PASSWORD"
CRYPT_LINK_PASSWORD="$CRYPT_LINK_PASSWORD"
MD5_PASSWORD="$MD5_PASSWORD"
LISTEN_SIZE="$LISTEN_SIZE"
MAXSENDQLENGTH="$MAXSENDQLENGTH"
BUFFERPOOL="$BUFFERPOOL"
MAXCONNECTIONS="$MAXCONNECTIONS"
DOMAINNAME="$DOMAINNAME"
NICKNAMEHISTORYLENGTH="$NICKNAMEHISTORYLENGTH"
NICK_DELAY="$NICK_DELAY"
CHECKPORT="$CHECKPORT"
MASK_SEED="$MASK_SEED"
__EOF__
exit
fi

mkdir configtmp.$$
cd configtmp.$$

if [ $? -ne 0 ] ; then
   echo "Error: unable to make temp directory: $TMPDIR"
   exit
fi

TMPDIR="`pwd`/"

#
# load $OPTIONS if present
#
if [ -r "$OPTIONS" -a "$1" != "-write" ] ; then
    . $OPTIONS
fi

#
2>/dev/null
if [ "`eval echo -n 'a'`" = "-n a" ] ; then
	c='\c'
else
	n='-n'
fi

clear

if [ "$LAST_VERSION" != "$IRCD_VERSION" ] ; then
    if [ -r doc/CHANGES.NEW ] ; then
	more doc/CHANGES.NEW
	echo $n "[Enter to begin]"
	read cc
    fi
fi


if [ "$1" = "-auto" ] ; then
    AUTO_CONFIG=Yes
    if [ "$HUB" != "default" ] ; then
        if [ "default" != "default" ] ; then HUB="default" ; fi
    fi
    if [ "$MD5_PASSWORD" != "default" ] ; then
        if [ "default" != "default" ] ; then MD5_PASSWORD="default" ; fi
    fi
    if [ "$CHECKPORT" != "default" ] ; then
        if [ "default" != "default" ] ; then CHECKPORT="default" ; fi
    fi
fi

if [ "$HUB" = "default" ] ; then 
    HUB_STOP=1
    HUB=''
fi

if [ "$CHECKPORT" = "default" ] ; then 
    CHECKPORT_STOP=1
    CHECKPORT='19000'
fi

if [ "$MD5_PASSWORD" = "default" ] ; then 
    MD5_STOP=1
    MD5='1'
fi



if [ "$1" = "-n" -o "$AUTO_CONFIG" = "Yes" ] ; then
    if [ "$LAST_VERSION" != "$IRCD_VERSION" ] ; then
	AUTO_CONFIG=''
       if [ "$LAST_VERSION" != "very very old" ] ; then
	echo "You specified the no-questions-asked configure, but the version"
	echo "of Config which created your Options file was [1m$LAST_VERSION[0m,"
	echo "And the current version is [1m$IRCD_VERSION[0m."
	echo " "
	echo "Please read the prompts carefully since some of them may have"
	echo "changed."
	echo " "
       fi
    else
	AUTO_CONFIG=Yes
    fi
fi

GETSERVER=''
if [ -x ./getserver ] ; then
    GETSERVER='./getserver'
elif [ -x ../getserver ] ; then
    GETSERVER='../getserver'
elif [ -x ./getserver.test ] ; then
    GETSERVER='./getserver.test'
fi

if [ -n "$GETSERVER" ] ; then
    SN_SERVER=define

    $GETSERVER -make
    SN_SEED=`$GETSERVER -seed`
    if [ $? -ne 0 ] ; then
        echo "Sorry, but there was an error in reading your SN server info file."
        exit
    fi

    SERVER_NAME=`$GETSERVER -name`
    SERVER_ID=`$GETSERVER -id`
    NETNAME=`$GETSERVER -net`
    NETKLINE=`$GETSERVER -kline`
    SN_BLURB=`$GETSERVER -blurb`
fi

cat << __EOF__
Welcome to autoconfigure for the SorceryNet-derived IRC server
version [1m$IRCD_VERSION[0m.

Config will generate $OPTIONS_H, and a persistant options file named
$OPTIONS

To change your server options you can just re-run './Config'

Enter "none" at any prompt to effect a null entry.

__EOF__

if [ "$SN_SERVER" = "define" ] ; then
cat << __EOF__
Found net script file: $GETSERVER

$SN_BLURB

If the server you are building is not to be a server linked to
$NETNAME or it is not the one shown above, then you should not use
this file.

Are you trying to build the server described above?
__EOF__

cc=''
FOO='Yes'
while [ -z "$cc" ] ; do
	echo $n "[$FOO] -> $c"
	read cc

	if [ -z "$cc" ] ; then
		cc="$FOO"
	fi

        case "$cc" in
	    [Yy]*)
	    echo ""
	    echo "Ok, building ircd for a $NETNAME server..."
	    echo ""
            export c
            export n
            `$GETSERVER -select`
	        ;;
	    [Nn]*)
            SERVER_NAME=''
	    SN_SERVER=undef
	    echo ""
	    echo "Ok, building in generic mode..."
	    echo ""
	        ;;
	    *)
	    echo ""
	    echo "You need to enter either Yes or No here..."
	    echo ""
	    cc=""
	    ;;
    esac
done
fi

if [ "$SN_SERVER" = "define" ] ; then
   MASK_SEED="$SN_SEED"
   KLINE_ADDRESS="$NETKLINE"
else
   KLINE_ADDRESS=""
   NETNAME="undef"
fi


if [ "$NETNAME" = "undef" ] ; then
runonce=""
FOO=""
while [ -z $FOO ] ; do
       FOO="$NETWORK"
       echo "What is the name of the IRC network?"
       echo "Note: The network name needs to be a valid nickname for"
       echo "autohurt support to function correctly."

       echo $n "[$FOO] -> $c"
       if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
               read cc
               runonce=Yes
    else
               cc=""
    fi
    if [ -z "$cc" ] ; then
       cc=$FOO
    fi
done
NETNAME=$cc
fi


##############################################3*************
cat <<__EOF__

If you need to use any extra libraries when compiling the server,
please tell me now (might need to look at the Makefiles) and please
include all the -l and -L flags.

You should use the recommended value unless you have a compelling reason
not to...
__EOF__
LIBS=`egrep "^IRCDLIBS=" $MAKEFILE 2>/dev/null | sed -e 's/^[^=]*=\(.*\)/\1/' | tr -d "\012"`

if [ -z "$LIBS" ] ; then
    LIBS="$DEFLIBS"
fi
echo "I suggest: $LIBS"
echo "You might need to add res_comp.o and res_mkquery.o too."
echo ""

FOO=''
echo $n "[$LIBS] -> $c"
if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
    read cc
else
    cc=""
fi

if [ -z "$cc" ] ; then
	cc="$cc $LIBS"
fi

if [ "$cc" = "none" ] ; then
	cc=''
fi

LIBS=$cc


# Fix Makefile
#
$RM -f Makefile.tmp
sed -e "s@^IRCDLIBS=\(.*\)@IRCDLIBS=$LIBS@" $MAKEFILE > Makefile.tmp
cp Makefile.tmp $MAKEFILE
$RM -f Makefile.tmp

#
#
COMP="$CCPATH $XCFLAGS $TMP -o $EXEC $LIBS"
export COMP

DESCRYPT=`egrep "^DESCRYPT=" $MAKEFILE 2>/dev/null | sed -e 's/^[^=]*[      ]*=\(.*\)/\1/'`

if [ "$DESCRYPT" != "none" -a -n "$DESCRYPT" ] ; then
echo " "
echo "Des Crypt"

if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
    echo "  some operating system/compiler combinations (such as FreeBSD) may not have"
    echo "crypt().  For these systems, part of the DES encryption"
    echo "library can be linked with ircd.. type 'fcrypt.o' if you want"
    echo "to do this, otherwise use 'none'"
    echo "(note: in some cases, just using -lcrypt will work)"
    echo $n "[$DESCRYPT] -> $c"
    read cc
else
    echo "DESCRYPT           : $DESCRYPT"
    cc=""
fi
if [ -z "$cc" ] ; then
	cc="$DESCRYPT"
fi
if [ "$cc" = "none" ] ; then
	cc=''
fi
DESCRYPT=$cc

else
     echo " "
fi
# 
# update makefile with descrypt setting # 
#

if [ "$DESCRYPT" = "none" ] ; then
    DESCRYPT=''
fi

echo $DESCRYPT
$RM -f Makefile.tmp
sed -e "s@^DESCRYPT=\(.*\)@DESCRYPT=$DESCRYPT@" $MAKEFILE > Makefile.tmp
cp Makefile.tmp $MAKEFILE
$RM -f Makefile.tmp


#
COMP="$CCPATH $XCFLAGS $TMP -o $EXEC $LIBS"
#

echo " "
echo $n "To be or not to be...$c"
cat > $TMP <<__EOF__
main()
{
	char	a[3], b[3];
	bzero(b,3);
	bcopy(a,b,3);
	(void)bcmp(a,b,3);
	exit(0);
}
__EOF__
$COMP >/dev/null 2>&1
q=$?
if [ $q -eq 0 ] ; then
	echo "and so it shall be! bcopy/bzero/bcmp are about!"
	BZERO=bzero
else
	echo "and it wasn't ($q).  No bcopy/bzero/bcmp...hmpf"
	BZERO=memset
fi
echo " "
echo $n "Which one, gettimeofday, or lrand48..$c"
cat > $TMP <<__EOF__
#include <stdio.h>
#include <sys/time.h>
main()
 {
   struct timeval tv;
   (void) gettimeofday(&tv, NULL);
 }
__EOF__
$COMP >/dev/null 2>&1
if [ $? -eq 0 ] ; then
	echo "We have a winner! gettimeofday found."
	GETTIMEOFDAY=define
else
	echo "No gettimeofday. Lets try lrand48."
cat > $TMP <<__EOF__
main()
{
   int a;
   a=lrand48();
}
__EOF__
	$COMP >/dev/null 2>&1
	if [ $? -eq 0 ] ; then
 		echo "Bingo! lrand48!"
		LRAND48=define
	fi
fi

#
# what do we need that isn't here already ?
#
echo "What else do I need that you don't have..."
echo $n "Lets see...$c"
cat > $TMP <<__EOF__
main()
{
	unsigned long foo;

	char  *s = strtoul("0x12345", &foo, 16);
	exit(0);
}
__EOF__
$COMP >/dev/null 2>&1

if [ $? -ne 0 ] ; then
    echo $n " strtoul$c"
    $RM -f Makefile.tmp
    sed -e "s@^STRTOUL=\(.*\)@STRTOUL=strtoul.o@" $MAKEFILE > Makefile.tmp
    cp Makefile.tmp $MAKEFILE
    $RM -f Makefile.tmp
else
    $RM -f Makefile.tmp
    sed -e "s@^STRTOUL=\(.*\)@STRTOUL=@" $MAKEFILE > Makefile.tmp
    cp Makefile.tmp $MAKEFILE
    $RM -f Makefile.tmp
fi
$RM -f $EXEC $TMP

cat > $TMP <<__EOF__
main()
{
	char  *s = strerror(0);
	exit(0);
}
__EOF__
$COMP >/dev/null 2>&1

if [ $? -ne 0 ] ; then
	echo $n " strerror$c"
	NSTRERROR=define
fi
$RM -f $EXEC $TMP
cat > $TMP <<__EOF__
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/nameser.h>
#include <resolv.h>

main()
{
	dn_skipname("","");
	exit(0);
}
__EOF__
$COMP >/dev/null 2>&1
#if [ "$LINUX_GLIBC" = "define" -o -n "$NEEDSKIPNAME" ] ;
#then
#    NEEDSKIPNAME="define";
#    echo $n " dn_skipname$c"
#    $RM -f Makefile.tmp
#    sed -e "s@^RES=\(.*\)@RES=res_comp.o res_mkquery.o@" $MAKEFILE > Makefile.tmp

#    cp Makefile.tmp $MAKEFILE
#    $RM -f Makefile.tmp
#else
    $RM -f Makefile.tmp
    sed -e "s@^RES=\(.*\)@RES=@" $MAKEFILE > Makefile.tmp
    cp Makefile.tmp $MAKEFILE
    $RM -f Makefile.tmp
#fi
$RM -f $EXEC $TMP
cat > $TMP <<__EOF__
#include <sys/types.h>
main()
{
    u_int32_t foo;
    exit(0);
}
__EOF__
$COMP >/dev/null 2>&1
if [ $? -ne 0 ] ; then
    echo $n " u_int32_t$c"
    $RM -f Makefile.tmp
    sed -e "s@^NEED_U_INT32_T=\(.*\)@NEED_U_INT32_T=-DNEED_U_INT32_T@" $MAKEFILE > Makefile.tmp
    cp Makefile.tmp $MAKEFILE
    $RM -f Makefile.tmp
else
    $RM -f Makefile.tmp
    sed -e "s@^NEED_U_INT32_T=\(.*\)@NEED_U_INT32_T=@" $MAKEFILE > Makefile.tmp
    cp Makefile.tmp $MAKEFILE
    $RM -f Makefile.tmp
fi
$RM -f $EXEC $TMP
cat > $TMP <<__EOF__
#$STRINGH STRINGH
#$STRINGSH STRINGSH
#include <stdio.h>
#ifdef STRINGH
#include <string.h>
#endif
#ifdef STRINGSH
#include <strings.h>
#endif
main()
{
	char  *t = "a", **p = NULL, *s = strtoken(&p, t, ",");
	if (!strcmp(t, s))
		exit(0);
	exit(1);
}
__EOF__
$COMP >/dev/null 2>&1
if [ $? -ne 0 ] ; then
	echo $n " strtoken$c"
	NSTRTOKEN=define
else
	$EXEC
	if [ $? -ne 0 ] ; then
		echo $n " strtoken$c"
		NSTRTOKEN=define
	fi
fi
$RM -f $EXEC $TMP
cat > $TMP <<__EOF__
#$STRINGH STRINGH
#$STRINGSH STRINGSH
#ifdef STRINGH
#include <string.h>
#endif
#ifdef STRINGSH
#include <strings.h>
#endif
main()
{
	char t[2] = "a";
	char *s = strtok(t, ",");
	if (!strcmp(t, s))
		exit(0);
	exit(1);
}
__EOF__
$COMP >/dev/null 2>&1
if [ $? -ne 0 ] ; then
	echo $n " strtok$c"
	NSTRTOK=define
else
	$EXEC
	if [ $? -ne 0 ] ; then
		echo $n " strtok$c"
		NSTRTOK=define
	fi
fi
$RM -f $EXEC $TMP
cat > $TMP << __EOF__
#include <sys/types.h>
#include <netinet/in.h>
main()
{
	struct	in_addr in;
	(void)inet_addr("1.2.3.4");
}
__EOF__
$COMP >/dev/null 2>&1
if [ $? -ne 0 ] ; then
	echo $n " inet_addr$c"
	NINETADDR=define
fi
$RM -f $EXEC $TMP
cat > $TMP << __EOF__
#include <sys/types.h>
#include <netinet/in.h>
main()
{
	struct	in_addr	in;
	in.s_addr = 0x12345678;
	(void)inet_ntoa(in);
}
__EOF__
$COMP >/dev/null 2>&1
if [ $? -ne 0 ] ; then
	echo $n " inet_ntoa$c"
fi
$RM -f $EXEC $TMP
cat > $TMP << __EOF__
#include <sys/types.h>
#include <netinet/in.h>
main()
{
	struct	in_addr	in;
	in.s_addr = 0x87654321;
	(void)inet_netof(in);
}
__EOF__
$COMP >/dev/null 2>&1
if [ $? -ne 0 ] ; then
	echo $n " inet_netof$c"
	NINETNETOF=define
fi
$RM -f $EXEC $TMP
echo " "
#
#
#
#echo " "
#echo "Ok, here's your chance...I think you should use $BLOCK, you want"
#echo "which of these ? O_NONBLOCK (POSIX) O_NDELAY (BSD) FIONBIO (SYSV)"
#echo $n "[$BLOCK] -> $c"
#if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
#    read cc
#else
#    cc=""
#fi
#if [ "$cc" = "none" ] ; then
#	cc=''
#elif [ -z "$cc" ] ; then
#	cc=$BLOCK
#fi
#BLOCK=$cc

#echo "I found $SIGNAL signals."
#if [ "$cc" = "none" ] ; then
#	cc=''
#elif [ "$SIGNAL" = "posix" ] ; then
#	echo "Hmmm...I'm not sure if signal() is reliable or not either..."
#fi
#echo "You can choose between posix, bsd and sysv.  What'll it be ?"
#echo $n "[$SIGNAL] -> $c"
#if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
#    read cc
#else
#    cc=""
#fi
#if [ "$cc" = "none" ] ; then
#	cc=''
#elif [ -z "$cc" ] ; then
#	cc=$SIGNAL
#fi
#SIGNAL=$cc

#if [ "$TIMES" = "none" ] ; then
#	echo "I didn't find either getrusage or times earlier...If you do have"
#	echo "either of these, please tell me now."
#else
#	echo "I found $TIMES, out of getrusage and times.  getrusage is"
#	echo "more informative.  If you wish to swap your choice, please"
#	echo "do so now."
#fi
#echo $n "[$TIMES] -> $c"
#if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
#    read cc
#else
#    cc=""
#fi
#if [ "$cc" = "none" ] ; then
#	cc=''
#elif [ -z "$cc" ] ; then
#	cc=$TIMES
#fi
#TIMES=$cc

$RM -f $EXEC $TMP $PLATE

#cat #> $SETUP  <#<__EOF__
#ifndef __setup_include__
#define __setup_include__
#$PARAMH	PARAMH
#$UNISTDH	UNISTDH
#$STRINGH	STRINGH
#$STRINGSH	STRINGSH
#$REDHAT6	REDHAT6
#$LINUX_GLIBC	LINUX_GLIBC
#$STDLIBH	STDLIBH
#$STDDEFH	STDDEFH
#$SYSSYSLOGH	SYSSYSLOGH
#$NOINDEX	NOINDEX
#$NSTRERROR	NEED_STRERROR
#$NSTRTOKEN	NEED_STRTOKEN
#$NSTRTOK	NEED_STRTOK
#$NINETADDR	NEED_INET_ADDR
#$NINETNTOA	NEED_INET_NTOA
#$NINETNETOF	NEED_INET_NETOF
#$GETTIMEOFDAY	GETTIMEOFDAY
#$LRAND48	LRAND48
#__EOF__

#if [ "$MALLOCH" = "undef" ] ; then
#	echo "#undef	MALLOCH" >> $SETUP
#else
#	echo "#define	MALLOCH	<$MALLOCH>" >> $SETUP
#fi

#if [ "$BZERO" = "memset" ] ; then
#	cat >#> $SETUP <<__EOF__
#define	bzero(a,b)	memset(a,0,b)
#define	bcopy(a,b,c)	memcpy(b,a,c)
#define	bcmp	memcmp
#__EOF__
#fi

#if [ "$BLOCK" = "O_NONBLOCK" ] ; then
#	echo "#define	NBLOCK_POSIX" >#> $SETUP
#elif [ "$BLOCK" = "O_NDELAY" ] ; then
#	echo "#define	NBLOCK_BSD" >#> $SETUP
#else
#	echo "#define	NBLOCK_SYSV" >> $SETUP
#fi

#if [ "$SIGNAL" = "posix" ] ; then
#	echo "#define	POSIX_SIGNALS" >#> $SETUP
#elif [ "$SIGNAL" = "bsd" ] ; then
#	echo "#define	BSD_RELIABLE_SIGNALS" >#> $SETUP
#else
#	echo "#define	SYSV_UNRELIABLE_SIGNALS" >#> $SETUP
#fi
#if [ "$TIMES" = "times" ] ; then
#	echo "#define	TIMES_2" >#> $SETUP
#	echo "#undef	GETRUSAGE_2" >#> $SETUP
#elif [ "$TIMES" = "getrusage" ] ; then
#	echo "#undef	TIMES_2" >#> $SETUP
#	echo "#define	GETRUSAGE_2" >#> $SETUP
#else
#	echo "#undef	TIMES_2" >#> $SETUP
#	echo "#undef	GETRUSAGE_2" >#> $SETUP
#fi
#echo "#endif" >#> $SETUP


#
# Now, get site specific options.
#

########################################

echo ""

if [ "$SN_SERVER" = "undef" ] ; then

FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    FOO="$MASK_SEED"
    echo "MASK_SEED"
    echo ""
    echo "For security, the address masking code uses special values,"
    echo "called seeds or salts.  For reasons of ban functionality, all"
    echo "servers on an interconnected IRC network must use the same seed"
    echo "values. You must enter exactly the value for your network. The"
    echo "seed is represented in hexadecimal notation."
    echo ""
    echo " <seed> ::= 0x{<hdig>}*8"
    echo " <hdig> ::= [0-9,a-f] "
    echo ""
    echo "A sample seed would be: 0x5532a331."
    echo ""

    echo $n "[0x00000000] -> $c"
    if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
	read cc
    else
	runonce=Yes
	cc=""
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi

    case "$cc" in
	0x[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])
	    MASK_SEED=$cc
	    ;;
	[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])
	    MASK_SEED=0x$cc
	    ;;
	*)
	    echo " "
	    echo "You did not enter a valid MASK_SEED value."
	    echo "Remember, it must be valid hexadecimal."
	    echo ""
	    FOO=""
	    ;;
    esac
done

fi
#######

# Nospoof
if [ 2 -gt 1 ] ; then

FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    if [ -n "$NOSPOOF" ] ; then
	FOO="Yes"
    else
	FOO="No"
    fi

    if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
        echo "NOSPOOF"
        echo ""
        echo "Some operating systems may still be running with insecure TCP stacks"
        echo "that can result in a vulnerability to spoofed IRC connections."
        echo ""
        echo "If you are CERTAIN your operating system has secure TCP stacks"
        echo "you do not need to define this.  If you are not certain, define"
        echo "this and find out if you need it later or not.  You can mail the"
        echo "source mailing list later; someone there can help you determine"
        echo "if your OS is secure or not."
        echo ""
        echo "Anti-spoof also has the side-effect of blocking some clonebots"
        echo "that lack the ability to respond to the PONG or CTCP messages,"
        echo "so you might want to enable this in any event."
        echo ""
        echo "Do you want to enable anti-spoof?"
        echo $n "[$FOO] -> $c"
	read cc
    else
        echo "NOSPOOF            : $NOSPOOF"
	runonce=Yes
	cc=""
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    case "$cc" in
	[Yy]*)
	    NOSPOOF="1"
	    ;;
	[Nn]*)
	    NOSPOOF=""
	    ;;
	*)
	    echo ""
	    echo "You need to enter either Yes or No here..."
	    echo ""
	    FOO=""
	    ;;
    esac
done

if [ -n "$NOSPOOF" ] ; then

#
# Cook up some nospoof seeds
#
cat <<__EOF__>$TMP
//#line 999
#include <stdio.h>
#include <time.h>
#include "../md5/md5.h"

#ifdef STDLIBH
#include <stdlib.h>
#endif

int main(int argc, char **argv) {
    static uint32 md5hash[4];
    static uint32 md5data[16];

#ifdef LRAND48
    srand48(time(NULL) + 1);
#endif

    md5data[0] = time(NULL);
    md5data[1] = 0x7544132;
    md5data[2] = atoi("$NOSPOOF_SEED01");
    md5data[3] = atoi("$NOSPOOF_SEED02");
#ifdef LRAND48
    md5data[4] = (lrand48() & 0x0000ffff);
#endif
    md5data[5] = atoi("$PPID");
    md5data[7] = atoi("$GID");
    md5data[8] = atoi("$RANDOM");
    md5data[9] = atoi("$SECONDS");
    md5data[11] = 0x2294549;
#ifdef LRAND48
    md5data[12] = lrand48() & 0xffff0000;
#endif
    md5data[13] = atoi("$$");
    md5data[14] = atoi("$UID");
        
    /* Don't edit these values.. they're part of the MD5 hashing process */
    md5hash[0] = 0x67452301;
    md5hash[1] = 0xefcdab89;
    md5hash[2] = 0x98badcfe;
    md5hash[3] = 0x10325476;

    MD5Transform(md5hash, (const uint32 *)md5data);

    if (argc < 2)
        printf("0x%.8x\n", md5hash[0]);
    else if (argc == 2)
        printf("0x%.8x\n", md5hash[3]);
    else if (argc == 3)
        printf("0x%.8x\n", md5hash[2]);
    else
        printf("0x%.8x\n", md5hash[1]);
}
__EOF__
$COMP >/dev/null 2>&1

NOSPOOF_SEED01=`$EXEC`
NOSPOOF_SEED02=`$EXEC x`

FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    FOO="$NOSPOOF_SEED01"

    if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
        echo "NOSPOOF_SEED01"
        echo "For security, the nospoof code uses two special values, called"
        echo "seeds.  Here, please enter one of them.  The values are in"
        echo "hexidecimal (base 16) using the digits 0123456789abcdef.  Each"
        echo "value can contain up to 8 digits, and should be specified in the"
        echo "form 0x12345678.  If you use the defaults, that should be ok, but" 
        echo "it is more secure if you choose your own special values and keep"
        echo "them secret."
        echo $n "[$FOO] -> $c"
	read cc
    else
        echo "NOSPOOF_SEED01     : $NOSPOOF_SEED01"
	cc=""
	runonce=Yes
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    case "$cc" in
	0x[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])
	    NOSPOOF_SEED01=$cc
	    ;;
	[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])
	    NOSPOOF_SEED01=0x$cc
	    ;;
	*)
	    echo " "
	    echo "Read the instructions and try again...  You did not enter the"
	    echo "value correctly."
	    echo ""
	    FOO=""
	    ;;
    esac
done

FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    FOO="$NOSPOOF_SEED02"

    if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
        echo "NOSPOOF_SEED02"
        echo "For security, the nospoof code uses two special values, called"
        echo "seeds.  Here, please enter one of them.  The values are in"
        echo "hexidecimal (base 16) using the digits 0123456789abcdef.  Each"
        echo "value can contain up to 8 digits, and should be specified in the"
        echo "form 0x12345678.  If you use the defaults, that should be ok, but"
        echo "it is more secure if you choose your own special values and keep"
        echo "them secret."
        echo $n "[$FOO] -> $c"
	read cc
    else
        echo "NOSPOOF_SEED02     : $NOSPOOF_SEED02"
	cc=""
	runonce=Yes
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    case "$cc" in
	0x[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])
	    NOSPOOF_SEED02=$cc
	    ;;
	[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])
	    NOSPOOF_SEED02=0x$cc
	    ;;
	*)
	    echo " "
	    echo "Read the instructions and try again...  You did not enter the"
	    echo "value correctly."
	    echo ""
	    FOO=""
	    ;;
    esac
done

FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    FOO="$NS_ADDRESS"
    if [ -z "$AUTO_CONFIG" -o -n "$runonce" -o -z "$FOO" ] ; then
        echo "NS_ADDRESS"
        echo ""
        echo "What is the contact address for connect problems due to the"
        echo "anti-spoof system, shown to the user when they connect?"
        echo "For SorceryNet, this is nospoof@sorcery.net.  If your server is not"
        echo "part of SorceryNet, please choose some other email address."
        echo $n "[$FOO] -> $c"
	read cc
    else
        echo "NS_ADDRESS         : $NS_ADDRESS"
	cc=""
	runonce=Yes
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    case "$cc" in
	*@*.*)
	   NS_ADDRESS=$cc
	    ;;
	*)
	    echo " "
	    echo "Read the instructions and try again...  You did not enter a"
	    echo "proper email address (user@host.domain)."
	    echo " "
	    FOO=""
	    ;;
    esac
done

# this matches a NOSPOOF check waaaaaay up there
fi

FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    FOO="$KLINE_ADDRESS"

    if [ -z "$AUTO_CONFIG" -o -n "$runonce" -o -z "$FOO" ] ; then
        echo "KLINE_ADDRESS"
        echo " "
        echo "What is the contact address for connect problems due to the"
        echo "user being K:lined, shown to the user when they attempt to"
        echo "connect?  This should be a valid email address."
        echo " "
        echo "For SorceryNet servers, note that this message is displayed when"
        echo "the user is affected by a local K:line or k:line.  With"
        echo "Services-based autokills, the message is set up automatically"
        echo "by Services to ask the user to email kline@sorcery.net.  It is"
        echo "recommended that you set this up to give a valid email address"
        echo "for the server's admin, not kline@sorcery.net."
        echo $n "[$FOO] -> $c"
	read cc
    else
        echo "KLINE_ADDRESS      : $KLINE_ADDRESS"
	cc=""
	runonce=Yes
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    case "$cc" in
	[Kk][Ll][Ii][Nn][Ee]@[Dd][Aa][Ll].[Nn][Ee][Tt])
	    KLINE_ADDRESS=$cc
	    FOO=""
	    echo " "
	    while [ -z "$FOO" ] ; do
		FOO="No"
		echo "Please note that kline@sorcery.net does not handle server-specific"
		echo "K:lines."
		echo "Are you sure you want to set the address to kline@sorcery.net?"
		echo $n "[$FOO] -> $c"
		if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
		    read cc
		    runonce=Yes
		else
		    cc=""
		fi
		if [ -z "$cc" ] ; then
		    cc=$FOO
		fi
		case "$cc" in
		    [Yy]*)
			;;
		    [Nn]*)
			KLINE_ADDRESS=""
			;;
		    *)
			echo ""
			echo "You need to enter either Yes or No here..."
			echo ""
			FOO=""
			;;
		esac
	    done
	    FOO="$KLINE_ADDRESS"
	    ;;
	*@*.*)
	    KLINE_ADDRESS=$cc
	    FOO="$KLINE_ADDRESS"
	    ;;
	*)
	    echo " "
	    echo "Read the instructions and try again...  You did not enter a"
	    echo "proper email address (user@host.domain)."
	    FOO=""
	    ;;
    esac
done
fi #
#### // NOSPOOF

FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    FOO="$DOMAINNAME"
    if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
        echo "DOMAINNAME"
        echo ""
        echo "What is your local domain name?  This is used for /stats w to"
        echo "report local clients vs. remote clients."
        echo $n "[$FOO] -> $c"
	read cc
    else
	cc=""
	runonce=Yes
        echo "DOMAINNAME         : $DOMAINNAME"
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    FOO=$cc
done
DOMAINNAME=$cc

FOO=""
runonce=""

while [ -z "$FOO" ] ; do
    if [ -n "$HUB" ] ; then
	FOO="Yes"
    else
	FOO="No"
    fi
    if [ -z "$AUTO_CONFIG" -o -n "$runonce" -o -n "$HUB_STOP" ] ; then
        echo "HUB"
        echo ""
        echo "Are you running as a HUB?"
        echo $n "[$FOO] -> $c"
	read cc
    else
        echo "HUB                : $HUB"
	runonce=Yes
	cc=""
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    case "$cc" in
	[Yy]*)
	    HUB="1"
	    ;;
	[Nn]*)
	    HUB=""
	    ;;
	*)
	    echo ""
	    echo "You need to enter either Yes or No here..."
	    echo ""
	    FOO=""
	    ;;
    esac
done


#    echo "#define CHECKPORT $CHECKPORT" >> $OPTIONS_H
FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    FOO="$CHECKPORT"

    if [ -z "$AUTO_CONFIG" -o -n "$runonce" -o -n "$CHECKPORT_STOP" ] ; then
        echo "CHECKPORT"
        echo ""
        echo "What local port should socks requests be checked with ? [must be >1024]"
        echo $n "[$FOO] -> $c"
	read cc
    else
        echo "CHECKPORT          : $CHECKPORT"
	runonce=Yes
	cc=""
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    case "$cc" in
	[1-9]*)
	    CHECKPORT="$cc"
	    ;;
	*)
	    echo ""
	    echo "You need to enter a number here."
	    echo ""
	    FOO=""
	    ;;
    esac
done

FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    if [ -n "$CRYPT_OPER_PASSWORD" ] ; then
	FOO="Yes"
    else
	FOO="No"
    fi
    if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
        echo "CRYPT_OPER_PASSWORD"
        echo ""
        echo "Are your oper passwords encrypted with crypt() ?"
        echo ""
        echo "If you enable this, then all oper passwords must be MD5 digests or"
        echo "encrypted with crypt()."
        echo ""
        echo "MD5 digest password hashes can be used without this option."
        echo ""
        echo $n "[$FOO] -> $c"
	read cc
    else
        echo "CRYPT_OPER_PASSWORD: $CRYPT_OPER_PASSWORD"

	cc=""
	runonce=Yes
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    case "$cc" in
	[Yy]*)
	    CRYPT_OPER_PASSWORD="1"
	    ;;
	[Nn]*)
	    CRYPT_OPER_PASSWORD=""
	    ;;
	*)
	    echo ""
	    echo "You need to enter either Yes or No here..."
	    echo ""
	    FOO=""
	    ;;
    esac
done

FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    if [ -n "$CRYPT_LINK_PASSWORD" ] ; then
	FOO="Yes"
    else
	FOO="No"
    fi
    if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
        echo "CRYPT_LINK_PASSWORD"
        echo ""
        echo "Are your incoming link passwords crypt()'ed? (N lines only,"
        echo "C lines must remain unencrypted always)"
        echo ""
        echo "If they are enabled, MD5 digests can be used in place of any N-line,"
        echo "O-line, or I-line password regardless of this option."
        echo ""
        echo $n "[$FOO] -> $c"
	read cc
    else
        echo "CRYPT_LINK_PASSWORD: $CRYPT_LINK_PASSWORD"
	cc=""
	runonce=Yes
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    case "$cc" in
	[Yy]*)
	    CRYPT_LINK_PASSWORD="1"
	    ;;
	[Nn]*)
	    CRYPT_LINK_PASSWORD=""
	    ;;
	*)
	    echo ""
	    echo "You need to enter either Yes or No here..."
	    echo ""
	    FOO=""
	    ;;
    esac
done


FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    if [ -n "$MD5_PASSWORD" ] ; then
	FOO="Yes"
    else
	FOO="No"
    fi
    if [ -z "$AUTO_CONFIG" -o -n "$runonce" -o -n "$MD5_STOP" ] ; then
        echo "MD5_PASSWORD"
        echo ""
        echo "This allows you to use a MD5 digest in place of the password"
        echo "portions within any N-line, I-line, or O-line."
        echo ""
        echo "example: O:foo@bar.com:MD5(5d41402abc4b2a76b9719d911017c592):foo:*:10"
        echo ""
        echo "Do you want support for MD5 message digest encryption?"
        echo $n "[$FOO] -> $c"
	read cc
    else
        echo "MD5_PASSWORD       : $MD5_PASSWORD"
	cc=""
	runonce=Yes
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    case "$cc" in
	[Yy]*)
            if [ ! -d "../md5" ] ; then
                echo ""
                echo "Sorry, the MD5 subdirectory cannot be found in this copy."
                echo ""
                FOO=''
            else
   	        MD5_PASSWORD="1"
            fi
	    ;;
	[Nn]*)
	    MD5_PASSWORD=""
	    ;;
	*)
	    echo ""
	    echo "You need to enter either Yes or No here..."
	    echo ""
	    FOO=""
	    ;;
    esac
done

FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    FOO="$LISTEN_SIZE"
    if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
        echo "LISTEN_SIZE"
        echo ""
        echo "What listen() backlog value do you wish to use?  Some servers"
        echo "have problems with more than 5, others work fine with many, many"
        echo "more."
        echo $n "[$FOO] -> $c"
	read cc
    else
        echo "LISTEN_SIZE        : $LISTEN_SIZE"
	cc=""
	runonce=Yes
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    case "$cc" in
	[1-9]*)
	    LISTEN_SIZE="$cc"
	    ;;
	*)
	    echo ""
	    echo "You need to enter a number here."
	    echo ""
	    FOO=""
	    ;;
    esac
done

FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    FOO="$NICKNAMEHISTORYLENGTH"

    if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
        echo "NICKNAMEHISTORYLENGTH"
        echo ""
        echo ""
        echo "How far back do you want to keep the nickname history?"
        echo $n "[$FOO] -> $c"
	read cc
    else
        echo "NICKHISTORYLENGTH  : $NICKHISTORYLENGTH"

	cc=""
	runonce=Yes
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    case "$cc" in
	[1-9]*)
	    NICKNAMEHISTORYLENGTH="$cc"
	    ;;
	*)
	    echo ""
	    echo "You need to enter a number here."
	    echo ""
	    FOO=""
	    ;;
    esac
done

FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    FOO="$MAXSENDQLENGTH"
    if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
        echo "MAXSENDQLENGTH"
        echo ""
        echo "What sendq length do you wish to have?"
        echo $n "[$FOO] -> $c"
	read cc
    else
        echo "MAXSENDQLENGTH     : $MAXSENDQLENGTH"
	cc=""
	runonce=Yes
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    case "$cc" in
	[1-9]*)
	    MAXSENDQLENGTH="$cc"
	    ;;
	*)
	    echo ""
	    echo "You need to enter a number here."
	    echo ""
	    FOO=""
	    ;;
    esac
done

FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    FOO="$BUFFERPOOL"
    echo "BUFFERPOOL"
    if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
        echo ""
        echo "What size of a bufferpool (total of ALL sendq's in use) do you"
        echo "do you wish to have?"
        echo $n "[$FOO] -> $c"
	read cc
    else
        echo "BUFFERPOOL         : $BUFFERPOOL"
	cc=""
	runonce=Yes
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    case "$cc" in
	\([1-9]*\))
	    BUFFERPOOL="$cc"
	    ;;
	*)
	    echo ""
	    echo "You need to enter a number here, either based on"
	    echo "MAXSENDQLENGTH or a literal value.  Also, this value"
	    echo "MUST be enclosed in parens -- (9*MAXSENDQLENGTH), for example."
	    echo ""
	    FOO=""
	    ;;
    esac
done

FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    FOO="$MAXCONNECTIONS"

    if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
        echo "MAXCONNECTIONS"
        echo ""
        echo "How many file descriptors (or sockets) can the irc server use?"
        echo $n "[$FOO] -> $c"
	read cc
    else
        echo "MAXCONNECTIONS     : $MAXCONNECTIONS"
	cc=""
	runonce=Yes
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    case "$cc" in
	[1-9][0-9][0-9]*)
	    MAXCONNECTIONS="$cc"
	    ;;
	*)
	    echo ""
	    echo "You need to enter a number here, greater or equal to 100."
	    echo ""
	    FOO=""
	    ;;
    esac
done

#
# check FD_SETSIZE and override if needed.
#

cat > $TMP <<__EOF__
#include <stdio.h>
#include <sys/types.h>
#include <time.h>

#ifndef FD_SETSIZE
#define FD_SETSIZE -1
#endif

/*
 * Prints "notdef" if FD_SETSIZE is undefined,
 *        "ok"     if FD_SETSIZE is at least as large as provided on the
 *                 compile command line (-DMAXCONNECTIONS=1234)
 *        "###"    if it is less.  (### is the FD_SETSIZE value)
 */
int
main(int argc, char *argv[])
{
	if (FD_SETSIZE == -1)
		printf("notdef\n");
	else if (FD_SETSIZE >= MAXCONNECTIONS)
		printf("ok\n");
	else
		printf("%d\n", FD_SETSIZE);

	return 0;
}
__EOF__
$COMP "-DMAXCONNECTIONS=$MAXCONNECTIONS" 2>/dev/null
if [ $? -ne 0 ] ; then
    echo " "
    echo "I could not determine what your system allows for the maximum number"
    echo "of connections becuase the test program did not compile."
    echo " "
    FD_SETSIZE=""
else
    fd_setsize_ok=`$EXEC`
    case $fd_setsize_ok in
	notdef)
	    echo " "
	    echo "I could not deterimne what your system allows for the maximum"
	    echo "number of connections because the test program did not find"
	    echo "a system-supplied value for FD_SETSIZE.  Assuming it is"
	    echo "defined correctly but the test program cannot find it."
	    echo " "
	    FD_SETSIZE=""
	    ;;
	ok)
            if [ -z "$AUTO_CONFIG" ] ; then
	    echo " "
	    echo "Your system-supplied value for FD_SETSIZE is large enough"
	    echo "for ircd to leave it untouched."
	    echo " "
	    FD_SETSIZE=""
	    fi
	    ;;
	*)
	    echo " "
	    echo "Your system-supplied value for FD_SETSIZE is $fd_setsize_ok"
	    echo "but you requested $MAXCONNECTIONS for ircd.  FD_SETSIZE will"
	    echo "be overridden using -DFD_SETSIZE=$MAXCONNECTIONS when"
	    echo "compiling ircd."
	    echo " "
	    FD_SETSIZE=$MAXCONNECTIONS
	    ;;
    esac
fi

if [ -n "$FD_SETSIZE" ] ; then
    $RM -f Makefile.tmp
    sed -e "s@^FD_SETSIZE=\(.*\)@FD_SETSIZE=-DFD_SETSIZE=$FD_SETSIZE@" $MAKEFILE > Makefile.tmp
    cp Makefile.tmp $MAKEFILE
    $RM -f Makefile.tmp
else
    $RM -f Makefile.tmp
    sed -e "s@^FD_SETSIZE=\(.*\)@FD_SETSIZE=@" $MAKEFILE > Makefile.tmp
    cp Makefile.tmp $MAKEFILE
    $RM -f Makefile.tmp
fi

if [ -z "$AUTO_CONFIG" ] ; then
cat <<__EOF__

The file "$OPTIONS" was either created or rewritten to contain your
answers to the above questions.

This file is automatically generated and will be updated each time you
run Config.  You should retain a copy of this to help migrate to future
versions of the SorceryNet server with ease.

__EOF__
fi

../$CONFIG_SCRIPT -write

rm -f $TMP $PLATE $EXEC
cd ..
rmdir configtmp.$$

echo 'Press [ENTER] to continue'
read 'foo'

cat <<__EOF__

 Config is complete.

 Before compiling, check the contents of [1minclude/config.h[0m for any strange
 things you usually set.  If you want them to be included in the future,
 ask them to be moved to the [1moptions.h[0m file on [1mcoders@sorcery.net[0m.

__EOF__
